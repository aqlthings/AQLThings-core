plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
    id 'maven-publish'
}

group 'fr.aquilon.minecraft'
version '4.0.0-SNAPSHOT-2'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)
javadoc.options.encoding = 'utf-8'
compileJava.options.encoding = 'utf-8'
compileTestJava.options.encoding = 'utf-8'

repositories {
    maven{ url = 'https://hub.spigotmc.org/nexus/content/repositories/public/' }
    maven{ url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    mavenCentral()
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.15.2-R0.1-SNAPSHOT'
    compileOnly 'mysql:mysql-connector-java:8.0.25'
    compileOnly 'net.luckperms:api:5.3'
    implementation 'org.json:json:20190722'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes(
                "Specification-Title": project.name,
                "Specification-Vendor": project.group,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor" : project.group,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        )
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url = layout.buildDirectory.dir('repo')
        }
    }
}

shadowJar {
    minimize()
    archiveClassifier.set('')
}

task generateTemplatedJava(type:Copy) {
    def ctx = templateContext()
    inputs.properties ctx
    from 'src/template/java'
    into "$buildDir/generated/java"
    expand ctx
}

sourceSets.main.java.srcDir "$buildDir/generated/java"
compileJava.dependsOn generateTemplatedJava

task generateTemplatedResources(type:Copy) {
    def ctx = templateContext()
    inputs.properties ctx
    from 'src/template/resources'
    into "$buildDir/generated/resources"
    expand ctx
}

sourceSets.main.resources.srcDir "$buildDir/generated/resources"
processResources.dependsOn generateTemplatedResources

sourceSets {
    template {
        java {}
        resources {}
    }
}

def templateContext() {
    [
            version: project.version,
            branch: gitBranch(),
            commit: gitCommit(),
            date: new Date().format("yyyy-MM-dd"),
            timestamp: new Date().getTime()
    ]
}

def gitCommit() {
    def commit = ""
    def proc = "git rev-parse HEAD".execute()
    proc.in.eachLine { line -> commit = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    commit
}

def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}